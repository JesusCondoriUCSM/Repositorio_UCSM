//GESTOR
package e; 

import java.io.*; 
import java.util.*; 


public class Gestor { 
private List<Personaje> personajes; 
private final String archivo; 


public Gestor(String archivo) { 
this.personajes = new ArrayList<>(); 
this.archivo = archivo; 
cargarPersonajesDesdeArchivo(); 

} 


public void agregarPersonaje(Personaje personaje) { 

if (!existePersonaje(personaje.getNombre())) { 
personajes.add(personaje); 
guardarCambios(); 

} else { 

System.out.println("el personaje ya existe"); 

} 

} 


public void modificarPersonaje(String nombre, String atributo, int nuevoValor) { 

for (Personaje p : personajes) { 
if (p.getNombre().equals(nombre)) { 
switch (atributo.toLowerCase()) { 
case "vida": 
p.setVida(nuevoValor); 

break; 
case "ataque": 
p.setAtaque(nuevoValor); 

break; 

case "defensa": 
p.setDefensa(nuevoValor); 

break; 
case "alcance": 
p.setAlcance(nuevoValor); 
break; 

default: 

System.out.println("atributo no valido."); 

} 

guardarCambios(); 
return; 

} 

} 

System.out.println("personaje no encontrado"); 

} 


public void eliminarPersonaje(String nombre) { 
personajes.removeIf(p -> p.getNombre().equals(nombre)); 
guardarCambios(); //removeIf metodo de interfaz collecton elimina elementos
//expresion par que p represente cada objeto de la lista
//Condiciom nombre del objeto Perosnaje p.get sea igual ql valor de la variable nombre
} 


public void mostrarPersonajes() { 
for (Personaje p : personajes) {//para recorrer colecciom
System.out.println(p); 

} 

} 


private boolean existePersonaje(String nombre) { 
return personajes.stream().anyMatch(p -> p.getNombre().equals(nombre)); //saber que un lemeto cumpla con la condicion dada

} 


private void guardarCambios() { 
try (BufferedWriter writer = new BufferedWriter(new FileWriter(archivo))) { 
for (Personaje p : personajes) { 
writer.write(p.getNombre() + "," + p.getVida() + "," + p.getAtaque() + "," + 
p.getDefensa() + "," + p.getAlcance()); 

writer.newLine(); 

} 

System.out.println("cambios guardados en el archivo"); 

} catch (IOException e) { 
e.printStackTrace(); 

} 
} 


private void cargarPersonajesDesdeArchivo() { 

try (BufferedReader reader = new BufferedReader(new FileReader(archivo))) { 
String linea; 
while ((linea = reader.readLine()) != null) { 
String[] datos = linea.split(","); 
agregarPersonaje(new Personaje(datos[0], Integer.parseInt(datos[1]), 

Integer.parseInt(datos[2]), Integer.parseInt(datos[3]), 
Integer.parseInt(datos[4]))); //covnertir dato string a un valor entero

} 

} catch (IOException e) { 

System.out.println("no se pudo cargar el archivo"); 

} 

} 

}



//PERSONAJE

package e; 

public class Personaje { 

private String nombre; 
private int vida; 
private int ataque; 
private int defensa; 
private int alcance; 


public Personaje(String nombre, int vida, int ataque, int defensa, int alcance) { 
if (vida <= 0 || ataque <= 0 || defensa <= 0 || alcance <= 0) { 
throw new IllegalArgumentException("todos los atributos deben ser mayores que cero"); 
//NUMERO ENTEROS MAYOR QWUR S0
} 

this.nombre = nombre; 
this.vida = vida; 
this.ataque = ataque; 
this.defensa = defensa; 
this.alcance = alcance; 

} 


// Getters y Setters 
public String getNombre() { 
return nombre; 
} 

public int getVida() { 
return vida; 

} 

public void setVida(int vida) { 
if (vida > 0) this.vida = vida; 
} 
public int getAtaque() { 
return ataque; 

} 

public void setAtaque(int ataque) { 
if (ataque > 0) this.ataque = ataque; 
} 
public int getDefensa() { 
return defensa; 
} 

public void setDefensa(int defensa) { 
if (defensa > 0) this.defensa = defensa; 
} 


public int getAlcance() { 
return alcance; 
} 

public void setAlcance(int alcance) { 
if (alcance > 0) this.alcance = alcance; 
} 


@Override 
public String toString() { 
return String.format("Nombre: %s, Vida: %d, Ataque: %d, Defensa: %d, Alcance: %d", 
nombre, vida, ataque, defensa, alcance);
} //cadena formateada con los parametos recibidos 
}

//MAIN

package e; 

import java.util.Scanner; 
public class Main { 

public static void main(String[] args) { 

Scanner scanner = new Scanner(System.in); 
String archivo = "personajes.txt"; // NOMBRE DEL ARCHIVP
Gestor gestor = new Gestor(archivo); 

// MENU
while (true) { 

System.out.println("Seleccione una opcion:"); 
System.out.println("1. Agregar personaje"); 
System.out.println("2. Modificar personaje"); 
System.out.println("3. Eliminar personaje"); 
System.out.println("4. Mostrar personajes"); 
System.out.println("5. Salir"); 
int opcion = scanner.nextInt(); 
scanner.nextLine(); //PARA LIMPIAR EL BUFFER
switch (opcion) { 

case 1: 
System.out.print("Ingrese el nombre del personaje: "); 
String nombre = scanner.nextLine(); 
System.out.print("Ingrese vida: "); 
int vida = scanner.nextInt(); 
System.out.print("Ingrese ataque: "); 
int ataque = scanner.nextInt(); 
System.out.print("Ingrese defensa: "); 
int defensa = scanner.nextInt(); 
System.out.print("Ingrese alcance: "); 
int alcance = scanner.nextInt(); 
scanner.nextLine(); 
